/*
 * Steward Strategy Provider API
 *
 * This proto defines the service/methods used by Strategy Providers to interact with Cellars through the Sommelier chain.
 */

syntax = "proto3";
package steward.v4;

option go_package = "/steward_proto";

import "aave_v2_stablecoin.proto";
import "cellar_v1.proto";
import "cellar_v2.proto";

/*
 * Service for handling Cellar contract calls
 */
service ContractCallService {
    // Handles scheduled contract call submission
    rpc Schedule(ScheduleRequest) returns (ScheduleResponse) {}
}

/*
 * Service for simulating contract calls encoded by Steward using Tenderly
 */
 service SimulateContractCallService {
    // Handles simulated contract call submission
    rpc Simulate(SimulateRequest) returns (SimulateResponse) {}
 }

 service StatusService {
    rpc Version(VersionRequest) returns (VersionResponse) {}
 }

/*
 * Represents a scheduled function call to a particular Cellar
 */
message ScheduleRequest {
    // The ID (currently simply an Ethereum address) of the target Cellar
    string cellar_id = 1;
    // The block height at which to schedule the contract call
    uint64 block_height = 2;
    // The data from which the desired contract function will be encoded
    oneof call_data {
        AaveV2Stablecoin aave_v2_stablecoin = 3;
        CellarV1 cellar_v1 = 4;
        CellarV2 cellar_v2 = 5;
        CellarV2_2 cellar_v2_2 = 6;
        CellarV2_5 cellar_v2_5 = 7;
    }
    // The ID of the chain on which the target Cellar resides
    uint64 chain_id = 8;
    // The unix timestamp deadline for the contract call to be executed
    uint64 deadline = 9;
}

message ScheduleResponse {
    // The hex encoded ID of the scheduled cork
    string id = 1;
    // The ID of the chain on which the target Cellar resides
    uint64 chain_id = 2;
}

/*
 * Represents a request for Steward's current status
 */
message StatusRequest {}

message StatusResponse {
    string version = 1;
}

/*
 * Represents a simulated function call to a particular Cellar
 */
 message SimulateRequest {
    ScheduleRequest request = 1;
    /// Whether to simply encode and return the contract call data, skipping the Tenderly simulation
    bool encode_only = 2;
}

message SimulateResponse {
    /// The encoded contract call
    string encoded_call = 1;
    /// The response body from the Tenderly simulation
    string response_body = 2;
}

message VersionRequest {}

message VersionResponse {
    string version = 1;
}
